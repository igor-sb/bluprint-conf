.. image:: images/bluprintconf_logo.png

General configuration
=====================

Bluprint_conf is a Python package that helps access configuration and data files
in Python or R projects following cookiecutter directory structure. It is part
of a Bluprint tool, but can also be used standalone.

Motivation
----------

Say you are working on exploratory analysis in a Python project that has a
"cookiecutter" structure (also generated by Bluprint)::

	my_project
	├── conf
	│   └── config.yaml
	├── data
	│   └── table.csv
	├── notebooks
	│   └── section
	│       └── notebook.ipynb
	├── my_project
	│   └── code.py
	└── pyproject.toml

In this type of structure, configuration files such as ``config.yaml``, as well
as any data files, live separately from either Python code or Jupyter Notebooks. 

Loading ``config.yaml`` in ``code.py`` would be done like this:

.. code-block:: python

	import yaml
	
	yaml_file = '../conf/config.yaml'
	with open(yaml_file, 'r') as file
	    cfg = yaml.safe_load(file)

There problem with his approach is that relative paths need to be updated, for
example in *notebook.ipynb* we need ``../../conf/config.yaml``.

This could be solved using absolute paths, however this would create a code that
is not portable and any change in absolute path would require updating these
paths across all scripts and notebooks.

The same problems apply for any other file outside of directory with scripts.
For example, if we wanted to organize paths to all files in *config.yaml* we
have the same problem.


Solution
--------

With bluprint_conf, the files are always loaded in the same way, regardless of
the location of our script or notebook, as long as they are within the project
root directory:

.. code-block:: python

	from bluprint_conf import load_config_yaml
	cfg = load_config_yaml()  # by default loads: conf/config.yaml

However, this requires that:

* project exists in a 
  `flat layout <https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/>`_
  (.py files are not inside a `src` directory)

* project is installed as an
  `editable package <https://pip.pypa.io/en/latest/topics/local-project-installs/#editable-installs>`_,
  (done by running ``pip install -e .`` in the project root directory)

Both of these are done automatically when you create or initialize a project
using Bluprint and this exposes all folders in your project root directory as
modules.

.. caution::

	If you use a Python package with the same name as one of the directories in
	your project root (e.g. ``data``), then you should rename that directory to
	avoid name collision.


.. toctree::
   :maxdepth: 2
   :caption: Contents:

   data-conf
   reference
